import { MigrationInterface, QueryRunner, Index } from 'typeorm';\n\nexport class AddSecurityIndexes1703002000000 implements MigrationInterface {\n  name = 'AddSecurityIndexes1703002000000';\n\n  public async up(queryRunner: QueryRunner): Promise<void> {\n    // Transaction table indexes for performance and security\n    await queryRunner.createIndex(\n      'transactions',\n      new Index('IDX_transactions_sender_id', ['senderId']),\n    );\n\n    await queryRunner.createIndex(\n      'transactions',\n      new Index('IDX_transactions_recipient_id', ['recipientId']),\n    );\n\n    await queryRunner.createIndex(\n      'transactions',\n      new Index('IDX_transactions_type', ['type']),\n    );\n\n    await queryRunner.createIndex(\n      'transactions',\n      new Index('IDX_transactions_status', ['status']),\n    );\n\n    await queryRunner.createIndex(\n      'transactions',\n      new Index('IDX_transactions_payment_method', ['paymentMethod']),\n    );\n\n    await queryRunner.createIndex(\n      'transactions',\n      new Index('IDX_transactions_created_at', ['createdAt']),\n    );\n\n    await queryRunner.createIndex(\n      'transactions',\n      new Index('IDX_transactions_updated_at', ['updatedAt']),\n    );\n\n    // Composite indexes for common transaction queries\n    await queryRunner.createIndex(\n      'transactions',\n      new Index('IDX_transactions_sender_type_status', ['senderId', 'type', 'status']),\n    );\n\n    await queryRunner.createIndex(\n      'transactions',\n      new Index('IDX_transactions_sender_created', ['senderId', 'createdAt']),\n    );\n\n    await queryRunner.createIndex(\n      'transactions',\n      new Index('IDX_transactions_type_status_created', ['type', 'status', 'createdAt']),\n    );\n\n    // Index for daily limit calculations\n    await queryRunner.createIndex(\n      'transactions',\n      new Index('IDX_transactions_daily_limits', ['senderId', 'type', 'status', 'createdAt']),\n    );\n\n    // Wallet table indexes\n    await queryRunner.createIndex(\n      'wallets',\n      new Index('IDX_wallets_user_id', ['userId']),\n    );\n\n    await queryRunner.createIndex(\n      'wallets',\n      new Index('IDX_wallets_balance', ['balance']),\n    );\n\n    await queryRunner.createIndex(\n      'wallets',\n      new Index('IDX_wallets_updated_at', ['updatedAt']),\n    );\n\n    // User table indexes for security\n    await queryRunner.createIndex(\n      'users',\n      new Index('IDX_users_email', ['email']),\n    );\n\n    await queryRunner.createIndex(\n      'users',\n      new Index('IDX_users_user_code', ['userCode']),\n    );\n\n    await queryRunner.createIndex(\n      'users',\n      new Index('IDX_users_phone_number', ['phoneNumber']),\n    );\n\n    await queryRunner.createIndex(\n      'users',\n      new Index('IDX_users_created_at', ['createdAt']),\n    );\n\n    await queryRunner.createIndex(\n      'users',\n      new Index('IDX_users_is_active', ['isActive']),\n    );\n\n    // JSONB indexes for transaction metadata\n    await queryRunner.query(\n      `CREATE INDEX IDX_transactions_metadata_checkout_request ON transactions USING GIN ((metadata->>'checkoutRequestId'))`,\n    );\n\n    await queryRunner.query(\n      `CREATE INDEX IDX_transactions_metadata_reference ON transactions USING GIN ((metadata->>'reference'))`,\n    );\n\n    await queryRunner.query(\n      `CREATE INDEX IDX_transactions_metadata_phone ON transactions USING GIN ((metadata->>'phoneNumber'))`,\n    );\n\n    // Partial indexes for active/pending transactions (better performance)\n    await queryRunner.query(\n      `CREATE INDEX IDX_transactions_pending ON transactions (senderId, createdAt) WHERE status = 'PENDING'`,\n    );\n\n    await queryRunner.query(\n      `CREATE INDEX IDX_transactions_topup_pending ON transactions (senderId, amount, createdAt) WHERE type = 'DEPOSIT' AND status = 'PENDING'`,\n    );\n\n    // Security-focused indexes\n    await queryRunner.query(\n      `CREATE INDEX IDX_transactions_large_amounts ON transactions (senderId, amount, createdAt) WHERE amount > 100000`,\n    );\n\n    await queryRunner.query(\n      `CREATE INDEX IDX_transactions_failed_attempts ON transactions (senderId, paymentMethod, createdAt) WHERE status = 'FAILED'`,\n    );\n  }\n\n  public async down(queryRunner: QueryRunner): Promise<void> {\n    // Drop custom indexes\n    await queryRunner.query('DROP INDEX IF EXISTS IDX_transactions_metadata_checkout_request');\n    await queryRunner.query('DROP INDEX IF EXISTS IDX_transactions_metadata_reference');\n    await queryRunner.query('DROP INDEX IF EXISTS IDX_transactions_metadata_phone');\n    await queryRunner.query('DROP INDEX IF EXISTS IDX_transactions_pending');\n    await queryRunner.query('DROP INDEX IF EXISTS IDX_transactions_topup_pending');\n    await queryRunner.query('DROP INDEX IF EXISTS IDX_transactions_large_amounts');\n    await queryRunner.query('DROP INDEX IF EXISTS IDX_transactions_failed_attempts');\n\n    // Drop named indexes\n    await queryRunner.dropIndex('transactions', 'IDX_transactions_sender_id');\n    await queryRunner.dropIndex('transactions', 'IDX_transactions_recipient_id');\n    await queryRunner.dropIndex('transactions', 'IDX_transactions_type');\n    await queryRunner.dropIndex('transactions', 'IDX_transactions_status');\n    await queryRunner.dropIndex('transactions', 'IDX_transactions_payment_method');\n    await queryRunner.dropIndex('transactions', 'IDX_transactions_created_at');\n    await queryRunner.dropIndex('transactions', 'IDX_transactions_updated_at');\n    await queryRunner.dropIndex('transactions', 'IDX_transactions_sender_type_status');\n    await queryRunner.dropIndex('transactions', 'IDX_transactions_sender_created');\n    await queryRunner.dropIndex('transactions', 'IDX_transactions_type_status_created');\n    await queryRunner.dropIndex('transactions', 'IDX_transactions_daily_limits');\n\n    await queryRunner.dropIndex('wallets', 'IDX_wallets_user_id');\n    await queryRunner.dropIndex('wallets', 'IDX_wallets_balance');\n    await queryRunner.dropIndex('wallets', 'IDX_wallets_updated_at');\n\n    await queryRunner.dropIndex('users', 'IDX_users_email');\n    await queryRunner.dropIndex('users', 'IDX_users_user_code');\n    await queryRunner.dropIndex('users', 'IDX_users_phone_number');\n    await queryRunner.dropIndex('users', 'IDX_users_created_at');\n    await queryRunner.dropIndex('users', 'IDX_users_is_active');\n  }\n}"