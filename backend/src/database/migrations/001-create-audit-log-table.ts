import { MigrationInterface, QueryRunner, Table, Index } from 'typeorm';\n\nexport class CreateAuditLogTable1703001000000 implements MigrationInterface {\n  name = 'CreateAuditLogTable1703001000000';\n\n  public async up(queryRunner: QueryRunner): Promise<void> {\n    await queryRunner.createTable(\n      new Table({\n        name: 'audit_logs',\n        columns: [\n          {\n            name: 'id',\n            type: 'uuid',\n            isPrimary: true,\n            generationStrategy: 'uuid',\n            default: 'uuid_generate_v4()',\n          },\n          {\n            name: 'action',\n            type: 'varchar',\n            length: '50',\n            isNullable: false,\n          },\n          {\n            name: 'severity',\n            type: 'enum',\n            enum: ['LOW', 'MEDIUM', 'HIGH', 'CRITICAL'],\n            isNullable: false,\n          },\n          {\n            name: 'description',\n            type: 'text',\n            isNullable: false,\n          },\n          {\n            name: 'userId',\n            type: 'uuid',\n            isNullable: true,\n          },\n          {\n            name: 'ipAddress',\n            type: 'varchar',\n            length: '45', // Support IPv6\n            isNullable: true,\n          },\n          {\n            name: 'userAgent',\n            type: 'text',\n            isNullable: true,\n          },\n          {\n            name: 'sessionId',\n            type: 'varchar',\n            length: '255',\n            isNullable: true,\n          },\n          {\n            name: 'metadata',\n            type: 'jsonb',\n            isNullable: true,\n          },\n          {\n            name: 'createdAt',\n            type: 'timestamp',\n            default: 'CURRENT_TIMESTAMP',\n          },\n        ],\n      }),\n      true,\n    );\n\n    // Create indexes for performance\n    await queryRunner.createIndex(\n      'audit_logs',\n      new Index('IDX_audit_logs_user_id', ['userId']),\n    );\n\n    await queryRunner.createIndex(\n      'audit_logs',\n      new Index('IDX_audit_logs_action', ['action']),\n    );\n\n    await queryRunner.createIndex(\n      'audit_logs',\n      new Index('IDX_audit_logs_severity', ['severity']),\n    );\n\n    await queryRunner.createIndex(\n      'audit_logs',\n      new Index('IDX_audit_logs_created_at', ['createdAt']),\n    );\n\n    await queryRunner.createIndex(\n      'audit_logs',\n      new Index('IDX_audit_logs_ip_address', ['ipAddress']),\n    );\n\n    // Composite indexes for common queries\n    await queryRunner.createIndex(\n      'audit_logs',\n      new Index('IDX_audit_logs_user_action', ['userId', 'action']),\n    );\n\n    await queryRunner.createIndex(\n      'audit_logs',\n      new Index('IDX_audit_logs_severity_created', ['severity', 'createdAt']),\n    );\n\n    // JSONB indexes for metadata queries\n    await queryRunner.query(\n      `CREATE INDEX IDX_audit_logs_metadata_transaction_id ON audit_logs USING GIN ((metadata->>'transactionId'))`,\n    );\n\n    await queryRunner.query(\n      `CREATE INDEX IDX_audit_logs_metadata_amount ON audit_logs USING BTREE (CAST(metadata->>'amount' AS NUMERIC))`,\n    );\n  }\n\n  public async down(queryRunner: QueryRunner): Promise<void> {\n    await queryRunner.dropTable('audit_logs');\n  }\n}"